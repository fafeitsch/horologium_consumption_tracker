type Series {
  id: Int!
  name: String!
}

scalar Date

type PricingPlan {
  id: Int!
  name: String!
  basePrice: Float!
  unitPrice: Float!
  validFrom: Date!
  validTo: Date
  seriesId: Int!
}

type MeterReading{
  id: Int!
  count: Float!
  date: Date!
  seriesId: Int!
}

type Statistics{
  validFrom: Date!
  validTo: Date!
  costs: Float!
  consumption: Float!
}

type Query {
  allSeries: [Series!]!
  series(id: Int!): Series
  pricingPlans(seriesId: Int!): [PricingPlan!]!
  meterReadings(seriesId: Int!): [MeterReading]!
  monthlyStatistics(seriesId: Int!, start: Date!, end: Date!): [Statistics]!
}

input NewSeriesInput {
  name: String!
}

input PricingPlanInput{
  name: String!
  basePrice: Float!
  unitPrice: Float!
  validFrom: Date!
  validTo: Date
  seriesId: Int!
}

input PricingPlanChange{
  id: Int!
  name: String!
  basePrice: Float!
  unitPrice: Float!
  validFrom: Date!
  validTo: Date
}

input MeterReadingInput{
  count: Float!
  date: Date!
  seriesId: Int!
}

input MeterReadingChange{
  id: Int!
  count: Float!
  date: Date!
}

type Mutation {
  createSeries(series: NewSeriesInput!): Series!
  deleteSeries(id: Int!): Int!
  createPricingPlan(plan: PricingPlanInput!): PricingPlan!
  modifyPricingPlan(plan: PricingPlanChange!): PricingPlan!
  createMeterReading(reading: MeterReadingInput!): MeterReading!
  modifyMeterReading(reading: MeterReadingChange!): MeterReading!
}